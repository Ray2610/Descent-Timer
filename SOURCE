import tkinter as tk
import time
from threading import Thread
import keyboard  # For global key detection
import os  # For file handling
import ctypes  # For disabling mouse interaction
import winsound  # For playing Windows sounds
import win32api
import win32con
import win32gui

class TimerApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.overrideredirect(True)  # Remove title bar and borders
        self.root.attributes("-topmost", True)
        self.root.attributes("-transparentcolor", "black")  # Set black as transparent

        # Make the window ignore mouse interactions
        hwnd = self.root.winfo_id()
        win32gui.SetWindowLong(hwnd, win32con.GWL_EXSTYLE, win32con.WS_EX_LAYERED | win32con.WS_EX_TOPMOST)
        win32gui.SetLayeredWindowAttributes(hwnd, 0, 0, win32con.LWA_COLORKEY)

        # Set position to the top-right corner manually
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        self.root.geometry(f"200x100+{screen_width - 200}+0")  # Top-right corner

        self.time_var = tk.StringVar(value="0")  # Timer value as a string
        self.running = False  # Timer state

        # Load the keybinds from the file
        self.load_keybinds()

        # Create a Canvas for the transparent background
        self.canvas = tk.Canvas(
            self.root,
            width=200,
            height=100,
            bg="black",  # Black background, will become transparent
            bd=0,        # No border
            highlightthickness=0,  # Remove border outline
        )
        self.canvas.pack(fill="both", expand=True)

        # Create text on the canvas
        self.label = self.canvas.create_text(
            100, 50,  # Position in the center
            text="0",  # Default timer text
            font=("Helvetica", 48, "bold"),
            fill="red"  # Red text color
        )

        # Start a background thread to monitor global key presses
        Thread(target=self.monitor_keys, daemon=True).start()

        # Start a thread to open the keybinding configuration window when F3 is pressed
        Thread(target=self.monitor_f3, daemon=True).start()

    def load_keybinds(self):
        """Load the keybinds from a file, if available."""
        if os.path.exists("keybinds.txt"):
            with open("keybinds.txt", "r") as file:
                lines = file.readlines()
                if len(lines) >= 2:
                    self.start_key = lines[0].strip()
                    self.exit_key = lines[1].strip()
                else:
                    self.set_default_keybinds()  # Default keys if the file is malformed
        else:
            self.set_default_keybinds()

    def set_default_keybinds(self):
        """Sets default keybinds."""
        self.start_key = "5"
        self.exit_key = "7"

    def save_keybinds(self):
        """Saves the current keybinds to a file."""
        with open("keybinds.txt", "w") as file:
            file.write(f"{self.start_key}\n")
            file.write(f"{self.exit_key}\n")

    def start_timer(self):
        """Starts the timer if not already running."""
        if not self.running:
            self.running = True
            Thread(target=self.run_timer, daemon=True).start()

    def close_app(self):
        """Closes the application."""
        self.running = False
        self.root.destroy()

    def run_timer(self):
        """Counts the timer from the current value to 10 and resets to 0."""
        while self.running:
            if int(self.time_var.get()) < 10:
                time.sleep(1)  # Wait for 1 second
                self.time_var.set(str(int(self.time_var.get()) + 1))
                self.canvas.itemconfig(self.label, text=self.time_var.get())  # Update the timer text
            elif int(self.time_var.get()) == 10:
                winsound.MessageBeep(winsound.MB_ICONEXCLAMATION)  # Play sound at 10
                time.sleep(1)  # Keep the timer at 10 for a second
                self.time_var.set("0")  # Reset to 0 when reaching 10
                self.canvas.itemconfig(self.label, text=self.time_var.get())  # Update the timer text
                self.running = False  # Stop the timer after reset

    def monitor_keys(self):
        """Monitors global key presses for start and close commands."""
        while True:
            try:
                if keyboard.is_pressed(self.start_key):  # Global start key
                    self.start_timer()
                elif keyboard.is_pressed(self.exit_key):  # Global close key
                    self.close_app()
                    break
                time.sleep(0.1)  # Avoid busy waiting
            except Exception as e:
                print(f"Error in key monitoring: {e}")
                break

    def monitor_f3(self):
        """Monitors F3 key to open keybinding configuration window."""
        while True:
            try:
                if keyboard.is_pressed("f3"):  # Open the keybinding window
                    self.open_keybinding_window()
                time.sleep(0.1)  # Avoid busy waiting
            except Exception as e:
                print(f"Error in F3 monitoring: {e}")
                break

    def open_keybinding_window(self):
        """Opens the keybinding configuration window."""
        keybind_window = tk.Toplevel(self.root)
        keybind_window.title("Keybindings")
        keybind_window.geometry("300x300")  # Slightly bigger window for the Save button at the bottom
        keybind_window.configure(bg="black")

        # Create a frame to hold the inputs and the save button
        frame = tk.Frame(keybind_window, bg="black")
        frame.pack(expand=True, fill="both")

        # Labels and entry fields for keybinding changes
        tk.Label(frame, text="Start Key:", fg="white", bg="black").pack(pady=5)
        start_key_entry = tk.Entry(frame, width=10)
        start_key_entry.insert(0, self.start_key)
        start_key_entry.pack(pady=5)

        tk.Label(frame, text="Exit Key:", fg="white", bg="black").pack(pady=5)
        exit_key_entry = tk.Entry(frame, width=10)
        exit_key_entry.insert(0, self.exit_key)
        exit_key_entry.pack(pady=5)

        def save_keybindings():
            """Saves the new keybindings and updates the active keys."""
            self.start_key = start_key_entry.get().strip()
            self.exit_key = exit_key_entry.get().strip()
            self.save_keybinds()  # Save keybindings to file
            keybind_window.destroy()  # Close the keybinding window after saving

        # Save button in the keybinding window, placed at the bottom
        save_button = tk.Button(
            keybind_window,
            text="Save",
            command=save_keybindings,
            bg="white",  # White background for the button
            fg="black",  # Black text for the button
            relief="raised",  # Raised effect for the button
            bd=3  # Border thickness
        )
        save_button.pack(side="bottom", pady=10)

    def run(self):
        """Runs the Tkinter main loop."""
        self.root.mainloop()


# Entry point for the program
if __name__ == "__main__":
    app = TimerApp()  # Create an instance of TimerApp
    app.run()         # Call the run method to start the application
